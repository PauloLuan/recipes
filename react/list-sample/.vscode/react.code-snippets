{
  "Example Cases": {
    "body": "$1 ${1/(.*)/${1:/upcase}/}  -> ${1/(.*)/${1:/downcase}/}  ->  ${1/(.*)/${1:/pascalcase}/}  ->  ${1/(.*)/${1:/capitalize}/}",
    "description": "how to make uppercase",
    "prefix": "cases"
  },
  "react:index": {
    "prefix": "react:index",
    "body": [
      "export * from './${1/(.*)/${1:/pascalcase}/}.component'",
      "export * as ${1/(.*)/${1:/pascalcase}/}Styles from './${1/(.*)/${1:/pascalcase}/}.styles'"
    ],
    "description": "Create an index export file"
  },
  "react:styled": {
    "prefix": "react:styled",
    "body": [
      "import styled from 'styled-components'",
      "",
      "export const ${1:Wrapper} = styled.${1:View}`",
      "  flex: 1;",
      "  background-color: ${({ theme }) => theme.colors.background};",
      "  ${3}",
      "`",
      "",
      "export const ${1:Text} = styled.${1:Text}``"
    ],
    "description": "Create React Styled Components file"
  },
  "pure:styled": {
    "prefix": "styled:pure",
    "body": ["export const ${1:Text} = styled.${1:Text}``"],
    "description": "Create React Styled Component line"
  },
  "react:test": {
    "prefix": "react:test",
    "body": [
      "import { waitFor } from '@testing-library/react'",
      "import React from 'react'",
      "import { renderWithTheme } from '../../utils/test-helper'",
      "import { ${1/(.*)/${1:/pascalcase}/} } from './${1/(.*)/${1:/pascalcase}/}.component'",
      "",
      "describe('<${1/(.*)/${1:/pascalcase}/} />', () => {",
      "  const testId = 'component-${1/(.*)/${1:/downcase}/}-id'",
      "",
      "  it('should render the ${1/(.*)/${1:/pascalcase}/} component', async () => {",
      "    const { queryByTestId, toJSON } = renderWithTheme(",
      "      <${1/(.*)/${1:/pascalcase}/} testId={testId} />",
      "    )",
      "    await waitFor(() => expect(queryByTestId(testId)).toBeTruthy())",
      "    expect(toJSON()).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "Create a simple unit test file"
  },
  "componentFunctionalTypescript": {
    "prefix": "react:comp",
    "body": [
      "import React from 'react'",
      "import * as S from './${1/(.*)/${1:/pascalcase}/}.styles'",
      "",
      "export interface ${1/(.*)/${1:/pascalcase}/}Props {",
      "  testId?: string",
      "}",
      "",
      "export const ${1/(.*)/${1:/pascalcase}/} = ({",
      "  testId = 'component-${1/(.*)/${1:/downcase}/}-id',",
      "  ...props",
      "}: ${1/(.*)/${1:/pascalcase}/}Props) => {",
      "  return <S.Wrapper testID={testId} {...props}></S.Wrapper>",
      "}"
    ],
    "description": "Create React TypeScript Functional Component"
  },
  "react:storybook": {
    "prefix": "react:storybook",
    "body": [
      "import { storiesOf } from \"@storybook/react-native\"",
      "import React from \"react\"",
      "import { ${1/(.*)/${1:/pascalcase}/} } from \"./${1/(.*)/${1:/downcase}/}.component\"",
      "",
      "const args = {",
      "  testId: \"component-${1/(.*)/${1:/downcase}/}-id\",",
      "}",
      "",
      "storiesOf(\"Components/${1/(.*)/${1:/pascalcase}/}\", module).add(\"default: \", () => (",
      "  <${1/(.*)/${1:/pascalcase}/} {...args} />",
      "))"
    ],
    "description": "Create React storybook component config"
  },
  "js:consoleLogObject": {
    "body": [
      "console.log('==============')",
      "console.log('${1:object} :>> ', JSON.stringify(${1:object}))",
      "console.log('==============')"
    ],
    "description": "Displays an object in the console with its name",
    "prefix": ["console", "log"]
  },

  "react:useCallback": {
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook",
    "prefix": "useCallback"
  },
  "react:useContext": {
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook",
    "prefix": "useContext"
  },
  "react:useDispatch": {
    "body": ["const $1 = $2 => dispatch($3)"],
    "prefix": "useDispatch"
  },
  "react:useDispatchFunction": {
    "body": ["const dispatch = useDispatch()"],
    "prefix": "useDispatchFunction"
  },
  "react:useEffect": {
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn cleanUp = () => {",
      "\t\t$2",
      "\t}",
      "}, [${3}])$0"
    ],
    "description": "React useEffect() hook",
    "prefix": "useEffect"
  },
  "react:useMemo": {
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook",
    "prefix": "useMemo"
  },
  "react:useReducer": {
    "body": [
      "const [${1:state},${2: dispatch}] = useReducer(state, action)",
      "\n\treturn (",
      "\t\t",
      "\t)"
    ],
    "description": "React useReducer() hook",
    "prefix": "useReducer"
  },
  "react:useRef": {
    "body": ["const $1 = useRef($2)$0"],
    "description": "React useRef() hook",
    "prefix": "useRef"
  },
  "react:useSelector": {
    "body": ["const $1 = useSelector(state => state.$1)"],
    "prefix": "useSelector"
  },
  "react:useState": {
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)$0"],
    "description": "React useState() hook",
    "prefix": "useState"
  }
}
