{
  "react:useCallback": {
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook",
    "prefix": "useCallback"
  },
  "react:useContext": {
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook",
    "prefix": "useContext"
  },
  "react:useDispatch": {
    "body": ["const $1 = $2 => dispatch($3)"],
    "prefix": "useDispatch"
  },
  "react:useDispatchFunction": {
    "body": ["const dispatch = useDispatch()"],
    "prefix": "useDispatchFunction"
  },
  "react:useEffect": {
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn cleanUp = () => {",
      "\t\t$2",
      "\t}",
      "}, [${3}])$0"
    ],
    "description": "React useEffect() hook",
    "prefix": "useEffect"
  },
  "react:useMemo": {
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook",
    "prefix": "useMemo"
  },
  "react:useReducer": {
    "body": [
      "const [${1:state},${2: dispatch}] = useReducer(state, action)",
      "\n\treturn (",
      "\t\t",
      "\t)"
    ],
    "description": "React useReducer() hook",
    "prefix": "useReducer"
  },
  "react:useRef": {
    "body": ["const $1 = useRef($2)$0"],
    "description": "React useRef() hook",
    "prefix": "useRef"
  },
  "react:useSelector": {
    "body": ["const $1 = useSelector(state => state.$1)"],
    "prefix": "useSelector"
  },
  "react:useState": {
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)$0"],
    "description": "React useState() hook",
    "prefix": "useState"
  }
}
